// Generated by gencpp from file turtlebot_archnoid/cool.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_ARCHNOID_MESSAGE_COOL_H
#define TURTLEBOT_ARCHNOID_MESSAGE_COOL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot_archnoid
{
template <class ContainerAllocator>
struct cool_
{
  typedef cool_<ContainerAllocator> Type;

  cool_()
    : cmd()
    , speed(0)  {
    }
  cool_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , speed(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cmd_type;
  _cmd_type cmd;

   typedef int64_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::turtlebot_archnoid::cool_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_archnoid::cool_<ContainerAllocator> const> ConstPtr;

}; // struct cool_

typedef ::turtlebot_archnoid::cool_<std::allocator<void> > cool;

typedef boost::shared_ptr< ::turtlebot_archnoid::cool > coolPtr;
typedef boost::shared_ptr< ::turtlebot_archnoid::cool const> coolConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_archnoid::cool_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_archnoid::cool_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_archnoid::cool_<ContainerAllocator1> & lhs, const ::turtlebot_archnoid::cool_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_archnoid::cool_<ContainerAllocator1> & lhs, const ::turtlebot_archnoid::cool_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_archnoid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlebot_archnoid::cool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_archnoid::cool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_archnoid::cool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_archnoid::cool_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_archnoid::cool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_archnoid::cool_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_archnoid::cool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ceee9847fb50c62d72b211b86b1a582";
  }

  static const char* value(const ::turtlebot_archnoid::cool_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ceee9847fb50c62ULL;
  static const uint64_t static_value2 = 0xd72b211b86b1a582ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_archnoid::cool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_archnoid/cool";
  }

  static const char* value(const ::turtlebot_archnoid::cool_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_archnoid::cool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string cmd\n"
"int64 speed\n"
;
  }

  static const char* value(const ::turtlebot_archnoid::cool_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_archnoid::cool_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cool_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_archnoid::cool_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_archnoid::cool_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cmd);
    s << indent << "speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_ARCHNOID_MESSAGE_COOL_H
